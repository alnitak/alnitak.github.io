{
  "sksl": {
    "entrypoint": "test3_fragment_main",
    "shader": "// This SkSL shader is autogenerated by spirv-cross.\n\nfloat4 flutter_FragCoord;\n\nuniform vec2 uResolution;\nuniform float iTime;\nuniform shader iChannel0;\nuniform half2 iChannel0_size;\n\nvec4 fragColor;\n\nvec3 iResolution;\n\nvec2 FLT_flutter_local_FlutterFragCoord()\n{\n    return flutter_FragCoord.xy;\n}\n\nvec3 FLT_flutter_local_hsv2rgb(vec3 c)\n{\n    vec4 K = vec4(1.0, 0.666666686534881591796875, 0.3333333432674407958984375, 3.0);\n    vec3 p = abs((fract(c.xxx + K.xyz) * 6.0) - K.www);\n    return mix(K.xxx, clamp(p - K.xxx, vec3(0.0), vec3(1.0)), vec3(c.y)) * c.z;\n}\n\nfloat FLT_flutter_local_getfrequency(float x)\n{\n    return iChannel0.eval(iChannel0_size * ( vec2(floor((x * 64.0) + 1.0) / 64.0, 0.25))).x + 0.0599999986588954925537109375;\n}\n\nfloat FLT_flutter_local_getfrequency_smooth(float x)\n{\n    float index = floor(x * 64.0) / 64.0;\n    float next = floor((x * 64.0) + 1.0) / 64.0;\n    float param = index;\n    float param_1 = next;\n    return mix(FLT_flutter_local_getfrequency(param), FLT_flutter_local_getfrequency(param_1), smoothstep(0.0, 1.0, fract(x * 64.0)));\n}\n\nfloat FLT_flutter_local_getfrequency_blend(float x)\n{\n    float param = x;\n    float param_1 = x;\n    return mix(FLT_flutter_local_getfrequency(param), FLT_flutter_local_getfrequency_smooth(param_1), 0.5);\n}\n\nvec3 FLT_flutter_local_doHalo(vec2 fragment, float radius)\n{\n    float dist = length(fragment);\n    float ring = 1.0 / abs(dist - radius);\n    float b = (dist < radius) ? 0.0599999986588954925537109375 : 0.20000000298023223876953125;\n    vec3 col = vec3(0.0);\n    float angle = atan(fragment.x, fragment.y);\n    vec3 param = vec3((angle + (iTime * 0.25)) / 6.28299999237060546875, 1.0, 1.0);\n    col += ((FLT_flutter_local_hsv2rgb(param) * ring) * b);\n    float param_1 = abs(angle / 3.141499996185302734375);\n    float frequency = max(FLT_flutter_local_getfrequency_blend(param_1) - 0.0199999995529651641845703125, 0.0);\n    col *= frequency;\n    col *= smoothstep(radius * 0.5, radius, dist);\n    return col;\n}\n\nvec3 FLT_flutter_local_doLine(vec2 fragment, float radius, float x)\n{\n    vec3 param = vec3((x * 0.23000000417232513427734375) + (iTime * 0.119999997317790985107421875), 1.0, 1.0);\n    vec3 col = FLT_flutter_local_hsv2rgb(param);\n    float freq = abs(fragment.x * 0.5);\n    float param_1 = freq;\n    col *= (((1.0 / abs(fragment.y)) * 0.20000000298023223876953125) * FLT_flutter_local_getfrequency(param_1));\n    col *= smoothstep(radius, radius * 1.7999999523162841796875, abs(fragment.x));\n    return col;\n}\n\nfloat FLT_flutter_local_luma(vec3 color)\n{\n    return dot(color, vec3(0.2989999949932098388671875, 0.58700001239776611328125, 0.114000000059604644775390625));\n}\n\nvoid FLT_flutter_local_mainImage(out vec4 fragColor_1, vec2 fragCoord)\n{\n    vec2 fragPos = fragCoord / iResolution.xy;\n    fragPos = (fragPos - vec2(0.5)) * 2.0;\n    fragPos.x *= (iResolution.x / iResolution.y);\n    vec3 color = vec3(0.0133999995887279510498046875, 0.05200000107288360595703125, 0.100000001490116119384765625);\n    vec2 param = fragPos;\n    float param_1 = 0.60000002384185791015625;\n    color += FLT_flutter_local_doHalo(param, param_1);\n    float c = cos(iTime * 0.5);\n    float s = sin(iTime * 0.5);\n    vec2 rot = mat2(vec2(c, s), vec2(-s, c)) * fragPos;\n    vec2 param_2 = rot;\n    float param_3 = 0.60000002384185791015625;\n    float param_4 = rot.x;\n    color += FLT_flutter_local_doLine(param_2, param_3, param_4);\n    vec3 param_5 = color;\n    color += vec3(max(FLT_flutter_local_luma(param_5) - 1.0, 0.0));\n    fragColor_1 = vec4(color, 1.0);\n}\n\nvoid FLT_main()\n{\n    iResolution = vec3(uResolution.x, uResolution.y, 0.0);\n    vec2 param_7 = FLT_flutter_local_FlutterFragCoord();\n    vec4 param_6;\n    FLT_flutter_local_mainImage(param_6, param_7);\n    fragColor = param_6;\n}\n\nhalf4 main(float2 iFragCoord)\n{\n      flutter_FragCoord = float4(iFragCoord, 0, 0);\n      FLT_main();\n      return fragColor;\n}\n",
    "stage": 1,
    "uniforms": [
      {
        "array_elements": 0,
        "bit_width": 0,
        "columns": 1,
        "location": 0,
        "name": "iChannel0",
        "rows": 1,
        "type": 12
      },
      {
        "array_elements": 0,
        "bit_width": 32,
        "columns": 1,
        "location": 1,
        "name": "uResolution",
        "rows": 2,
        "type": 10
      },
      {
        "array_elements": 0,
        "bit_width": 32,
        "columns": 1,
        "location": 2,
        "name": "iTime",
        "rows": 1,
        "type": 10
      }
    ]
  }
}