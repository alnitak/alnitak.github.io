{
  "sksl": {
    "entrypoint": "test6_fragment_main",
    "shader": "// This SkSL shader is autogenerated by spirv-cross.\n\nfloat4 flutter_FragCoord;\n\nuniform vec2 uResolution;\nuniform float iTime;\nuniform shader iChannel0;\nuniform half2 iChannel0_size;\n\nvec4 fragColor;\n\nvec3 iResolution;\n\nvec2 FLT_flutter_local_FlutterFragCoord()\n{\n    return flutter_FragCoord.xy;\n}\n\nmat3 FLT_flutter_local_rot(vec3 ang)\n{\n    mat3 x = mat3(vec3(1.0, 0.0, 0.0), vec3(0.0, cos(ang.x), -sin(ang.x)), vec3(0.0, sin(ang.x), cos(ang.x)));\n    mat3 y = mat3(vec3(cos(ang.y), 0.0, sin(ang.y)), vec3(0.0, 1.0, 0.0), vec3(-sin(ang.y), 0.0, cos(ang.y)));\n    mat3 z = mat3(vec3(cos(ang.z), -sin(ang.z), 0.0), vec3(sin(ang.z), cos(ang.z), 0.0), vec3(0.0, 0.0, 1.0));\n    return (x * y) * z;\n}\n\nfloat FLT_flutter_local_udBox(vec3 p, vec3 b)\n{\n    return length(max(abs(p) - b, vec3(0.0)));\n}\n\nvec4 FLT_flutter_local_map(vec3 rp)\n{\n    vec4 d = vec4(0.0);\n    vec3 bgCol = vec3(0.125);\n    float waveF = iChannel0.eval(iChannel0_size * ( vec2((rp.x + 1.7999999523162841796875) / 3.599999904632568359375, 0.75))).x;\n    vec3 param = rp - vec3(0.0, ((-waveF) * 1.0) + 0.5, 0.25);\n    vec3 param_1 = vec3(1.7999999523162841796875, 0.0199999995529651641845703125, 0.001000000047497451305389404296875);\n    float waveDist = FLT_flutter_local_udBox(param, param_1);\n    vec4 wave = vec4(0.300000011920928955078125, 0.300000011920928955078125, 0.300000011920928955078125, waveDist);\n    vec3 param_2 = rp - vec3(0.0, 0.0, 0.75);\n    vec3 param_3 = vec3(1.7999999523162841796875, 1.10000002384185791015625, 0.5);\n    float backWallDist = FLT_flutter_local_udBox(param_2, param_3);\n    vec4 backWall = vec4(bgCol, backWallDist);\n    vec3 param_4 = rp - vec3(1.89999997615814208984375, 0.0, 0.372500002384185791015625);\n    vec3 param_5 = vec3(0.100000001490116119384765625, 1.10000002384185791015625, 1.0);\n    float edgeLeftDist = FLT_flutter_local_udBox(param_4, param_5);\n    vec4 edgeLeft = vec4(bgCol, edgeLeftDist);\n    vec3 param_6 = rp - vec3(-1.89999997615814208984375, 0.0, 0.372500002384185791015625);\n    vec3 param_7 = vec3(0.100000001490116119384765625, 1.10000002384185791015625, 1.0);\n    float edgeRightDist = FLT_flutter_local_udBox(param_6, param_7);\n    vec4 edgeRight = vec4(bgCol, edgeRightDist);\n    vec3 param_8 = rp - vec3(0.0, 1.2000000476837158203125, 0.372500002384185791015625);\n    vec3 param_9 = vec3(2.0, 0.100000001490116119384765625, 1.0);\n    float edgeTopDist = FLT_flutter_local_udBox(param_8, param_9);\n    vec4 edgeTop = vec4(bgCol, edgeTopDist);\n    vec3 param_10 = rp - vec3(0.0, -1.2000000476837158203125, 0.372500002384185791015625);\n    vec3 param_11 = vec3(2.0, 0.100000001490116119384765625, 1.0);\n    float edgeBotDist = FLT_flutter_local_udBox(param_10, param_11);\n    vec4 edgeBot = vec4(bgCol, edgeBotDist);\n    bvec4 _335 = bvec4(edgeLeft.w > backWall.w);\n    d = vec4(_335.x ? backWall.x : edgeLeft.x, _335.y ? backWall.y : edgeLeft.y, _335.z ? backWall.z : edgeLeft.z, _335.w ? backWall.w : edgeLeft.w);\n    bvec4 _344 = bvec4(edgeRight.w > d.w);\n    d = vec4(_344.x ? d.x : edgeRight.x, _344.y ? d.y : edgeRight.y, _344.z ? d.z : edgeRight.z, _344.w ? d.w : edgeRight.w);\n    bvec4 _353 = bvec4(edgeTop.w > d.w);\n    d = vec4(_353.x ? d.x : edgeTop.x, _353.y ? d.y : edgeTop.y, _353.z ? d.z : edgeTop.z, _353.w ? d.w : edgeTop.w);\n    bvec4 _362 = bvec4(edgeBot.w > d.w);\n    d = vec4(_362.x ? d.x : edgeBot.x, _362.y ? d.y : edgeBot.y, _362.z ? d.z : edgeBot.z, _362.w ? d.w : edgeBot.w);\n    bvec4 _371 = bvec4(wave.w > d.w);\n    d = vec4(_371.x ? d.x : wave.x, _371.y ? d.y : wave.y, _371.z ? d.z : wave.z, _371.w ? d.w : wave.w);\n    return d;\n}\n\nvec3 FLT_flutter_local_getCol(inout float v, vec3 col1, vec3 col2)\n{\n    v = clamp(v, 0.0, 1.0);\n    vec3 res = vec3(0.0);\n    for (int i = 0; i < 3; i++)\n    {\n        res[i] = col1[i] + (v * (col2[i] - col1[i]));\n    }\n    return res;\n}\n\nvec3 FLT_flutter_local_normal(vec3 rp)\n{\n    vec3 eps = vec3(0.00200000009499490261077880859375, 0.0, 0.0);\n    vec3 param = rp + eps.xyy;\n    vec3 param_1 = rp - eps.xyy;\n    vec3 param_2 = rp + eps.yxy;\n    vec3 param_3 = rp - eps.yxy;\n    vec3 param_4 = rp + eps.yyx;\n    vec3 param_5 = rp - eps.yyx;\n    return normalize(vec3(FLT_flutter_local_map(param).w - FLT_flutter_local_map(param_1).w, FLT_flutter_local_map(param_2).w - FLT_flutter_local_map(param_3).w, FLT_flutter_local_map(param_4).w - FLT_flutter_local_map(param_5).w));\n}\n\nfloat FLT_flutter_local_light(vec3 lp, vec3 rp, vec3 n, float pulse)\n{\n    return (((1.5 * (pulse + 0.0500000007450580596923828125)) / pow(distance(lp, rp), 2.0)) * max(dot(normalize(lp - rp), n), 0.0)) * 0.25;\n}\n\nfloat FLT_flutter_local_drawLight(vec3 lp, vec3 rd, vec3 ro, float td, float pulse)\n{\n    float res = 0.0;\n    if (td > distance(lp, ro))\n    {\n        float dlp = length(cross(lp - ro, lp - (ro + rd))) / length((ro + rd) - ro);\n        res = max(exp(((-dlp) * 64.0) * ((1.0 - pulse) + 0.5)), 0.0);\n    }\n    return res;\n}\n\nfloat FLT_flutter_local_noise3D(vec3 p)\n{\n    return fract(sin(dot(p, vec3(12.98980045318603515625, 78.233001708984375, 128.8520050048828125))) * 43758.546875);\n}\n\nvoid FLT_flutter_local_mainImage(inout vec4 fragColor_1, vec2 fragCoord)\n{\n    vec2 uv = fragCoord / iResolution.xy;\n    uv = vec2(uv.x, 1.0 - uv.y);\n    vec2 p = (uv * 2.0) - vec2(1.0);\n    p.x *= (iResolution.x / iResolution.y);\n    vec2 m = vec2(0.5);\n    m = (m * 2.0) - vec2(1.0);\n    vec3 col = vec3(0.0);\n    float hArr[16];\n    for (int i = 0; i < 16; i++)\n    {\n        hArr[i] = iChannel0.eval(iChannel0_size * ( vec2((1.0 / pow(2.0, float(i) * 0.5)) - 0.001000000047497451305389404296875, 0.25))).x;\n    }\n    float z = -0.5;\n    vec3 ro = vec3(0.0, 0.0, z - 2.0);\n    vec3 rd = normalize(vec3(p, z) - ro);\n    vec3 ang = vec3(0.0);\n    vec3 param = ang;\n    ro *= FLT_flutter_local_rot(param);\n    vec3 param_1 = ang;\n    rd *= FLT_flutter_local_rot(param_1);\n    vec3 rp = vec3(0.0);\n    vec4 d = vec4(0.0);\n    float td = 0.5;\n    float dMax = 25.0;\n    for (int i_1 = 0; i_1 < 64; i_1++)\n    {\n        if (td >= dMax)\n        {\n            break;\n        }\n        rp = ro + (rd * td);\n        vec3 param_2 = rp;\n        d = FLT_flutter_local_map(param_2);\n        if (d.w < 0.001000000047497451305389404296875)\n        {\n            break;\n        }\n        td += (d.w * 0.75);\n    }\n    vec3 lp[16];\n    for (int i_2 = 0; i_2 < 16; i_2++)\n    {\n        lp[i_2] = vec3((7.5 - float(i_2)) * 0.2125000059604644775390625, (hArr[i_2] * 2.0) - 1.0, 0.0);\n    }\n    float g = 5.0;\n    float r = 1.25;\n    vec3 lc[16];\n    for (int i_3 = 0; i_3 < 16; i_3++)\n    {\n        float param_3 = hArr[i_3] * r;\n        vec3 param_4 = vec3(0.25, 0.625, 0.625);\n        vec3 param_5 = vec3(0.25, 0.25, 1.0);\n        vec3 _676 = FLT_flutter_local_getCol(param_3, param_4, param_5);\n        float param_6 = (hArr[i_3] - 0.800000011920928955078125) * g;\n        vec3 param_7 = _676;\n        vec3 param_8 = vec3(1.0, 0.25, 0.25);\n        vec3 _681 = FLT_flutter_local_getCol(param_6, param_7, param_8);\n        lc[i_3] = _681;\n    }\n    vec3 param_9 = rp;\n    vec3 n = FLT_flutter_local_normal(param_9);\n    if (d.w < 0.001000000047497451305389404296875)\n    {\n        vec3 illumination = vec3(0.00999999977648258209228515625);\n        for (int i_4 = 0; i_4 < 16; i_4++)\n        {\n            vec3 param_10 = lp[i_4];\n            vec3 param_11 = rp;\n            vec3 param_12 = n;\n            float param_13 = hArr[i_4];\n            illumination += (lc[i_4] * FLT_flutter_local_light(param_10, param_11, param_12, param_13));\n        }\n        col = d.xyz * illumination;\n    }\n    for (int i_5 = 0; i_5 < 16; i_5++)\n    {\n        vec3 param_14 = lp[i_5];\n        vec3 param_15 = rd;\n        vec3 param_16 = ro;\n        float param_17 = td;\n        float param_18 = hArr[i_5];\n        col += (lc[i_5] * FLT_flutter_local_drawLight(param_14, param_15, param_16, param_17, param_18));\n    }\n    col = clamp(col, vec3(0.0), vec3(1.0));\n    col = pow(col, vec3(0.449999988079071044921875));\n    float f = 8.0;\n    col = ((vec3(1.0) / (vec3(1.0) + exp(vec3(4.0) - (col * f)))) - vec3(0.0003000000142492353916168212890625)) / vec3(0.9639999866485595703125);\n    p.x /= (iResolution.x / iResolution.y);\n    col *= smoothstep(1.3250000476837158203125, 0.824999988079071044921875, abs(p.x));\n    col *= smoothstep(1.3250000476837158203125, 0.824999988079071044921875, abs(p.y));\n    float dither = 0.015625;\n    vec3 param_19 = vec3(p, fract(iTime));\n    col += vec3(((FLT_flutter_local_noise3D(param_19) * 2.0) - 1.0) * dither);\n    fragColor_1 = vec4(col, 1.0);\n}\n\nvoid FLT_main()\n{\n    iResolution = vec3(uResolution.x, uResolution.y, 0.0);\n    vec2 param_21 = FLT_flutter_local_FlutterFragCoord();\n    vec4 param_20;\n    FLT_flutter_local_mainImage(param_20, param_21);\n    fragColor = param_20;\n}\n\nhalf4 main(float2 iFragCoord)\n{\n      flutter_FragCoord = float4(iFragCoord, 0, 0);\n      FLT_main();\n      return fragColor;\n}\n",
    "stage": 1,
    "uniforms": [
      {
        "array_elements": 0,
        "bit_width": 0,
        "columns": 1,
        "location": 0,
        "name": "iChannel0",
        "rows": 1,
        "type": 12
      },
      {
        "array_elements": 0,
        "bit_width": 32,
        "columns": 1,
        "location": 1,
        "name": "uResolution",
        "rows": 2,
        "type": 10
      },
      {
        "array_elements": 0,
        "bit_width": 32,
        "columns": 1,
        "location": 2,
        "name": "iTime",
        "rows": 1,
        "type": 10
      }
    ]
  }
}