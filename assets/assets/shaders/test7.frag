{
  "sksl": {
    "entrypoint": "test7_fragment_main",
    "shader": "// This SkSL shader is autogenerated by spirv-cross.\n\nfloat4 flutter_FragCoord;\n\nuniform vec2 uResolution;\nuniform float iTime;\nuniform shader iChannel0;\nuniform half2 iChannel0_size;\n\nvec4 fragColor;\n\nvec3 iResolution;\n\nvec2 FLT_flutter_local_FlutterFragCoord()\n{\n    return flutter_FragCoord.xy;\n}\n\nmat3 FLT_flutter_local_rot(vec3 ang)\n{\n    mat3 x = mat3(vec3(1.0, 0.0, 0.0), vec3(0.0, cos(ang.x), -sin(ang.x)), vec3(0.0, sin(ang.x), cos(ang.x)));\n    mat3 y = mat3(vec3(cos(ang.y), 0.0, sin(ang.y)), vec3(0.0, 1.0, 0.0), vec3(-sin(ang.y), 0.0, cos(ang.y)));\n    mat3 z = mat3(vec3(cos(ang.z), -sin(ang.z), 0.0), vec3(sin(ang.z), cos(ang.z), 0.0), vec3(0.0, 0.0, 1.0));\n    return (x * y) * z;\n}\n\nfloat FLT_flutter_local_noise3D(vec3 p)\n{\n    return (fract(sin(dot(p, vec3(12.98980045318603515625, 78.233001708984375, 128.8520050048828125))) * 43758.546875) * 2.0) - 1.0;\n}\n\nfloat FLT_flutter_local_loudness(float i, float mag)\n{\n    return (10.0 * mag) * sqrt(log(i + 1.0));\n}\n\nvec3 FLT_flutter_local_opRep(vec3 p, vec3 c)\n{\n    vec3 q = mod(p, c) - (c * 0.5);\n    return q;\n}\n\nfloat FLT_flutter_local_sphereDistance(vec3 st, vec3 center, float radius)\n{\n    return distance(st, center) - radius;\n}\n\nvec3 FLT_flutter_local_map(inout vec3 p)\n{\n    vec3 rep = vec3(118.0);\n    vec3 randIndex = floor(p / rep);\n    vec3 param = randIndex;\n    float rand = FLT_flutter_local_noise3D(param);\n    vec3 param_1 = floor(p / rep) * 1.12999999523162841796875;\n    float f = 1.0 * FLT_flutter_local_noise3D(param_1);\n    float spectrumRange = abs(f) * 0.4000000059604644775390625;\n    float freqMag = 1.0 * iChannel0.eval(iChannel0_size * ( vec2(spectrumRange, 0.0))).x;\n    float param_2 = spectrumRange;\n    float param_3 = freqMag;\n    freqMag = FLT_flutter_local_loudness(param_2, param_3);\n    vec3 param_4 = p;\n    vec3 param_5 = rep;\n    p = FLT_flutter_local_opRep(param_4, param_5);\n    vec4 sphere = vec4((rand * 0.1500000059604644775390625) * rep.x, (f * 0.1500000059604644775390625) * rep.y, (((0.5 * f) + (0.5 * rand)) * 0.1500000059604644775390625) * rep.z, 1.0 + (5.0 * abs(f)));\n    vec3 param_6 = p;\n    vec3 param_7 = sphere.xyz;\n    float param_8 = sphere.w;\n    float dist = FLT_flutter_local_sphereDistance(param_6, param_7, param_8);\n    vec3 result = vec3(dist, f, freqMag);\n    return result;\n}\n\nvec3 FLT_flutter_local_palette(float t, vec3 a, vec3 b, vec3 c, vec3 d)\n{\n    return a + (b * cos(((c * t) + d) * 6.28318023681640625));\n}\n\nvec3 FLT_flutter_local_GetSphereIndexColor(float index)\n{\n    vec3 cA = vec3(0.20000000298023223876953125, 0.60000002384185791015625, 0.89999997615814208984375);\n    vec3 cB = vec3(0.300000011920928955078125, 0.5, 0.20000000298023223876953125);\n    vec3 cC = vec3(1.0);\n    vec3 cD = vec3(0.100000001490116119384765625, 0.20000000298023223876953125, 0.5);\n    float param = index + 0.4000000059604644775390625;\n    vec3 param_1 = cA;\n    vec3 param_2 = cB;\n    vec3 param_3 = cC;\n    vec3 param_4 = cD;\n    return FLT_flutter_local_palette(param, param_1, param_2, param_3, param_4);\n}\n\nvoid FLT_flutter_local_mainImage(inout vec4 fragColor_1, vec2 fragCoord)\n{\n    vec2 p = ((fragCoord * 2.0) - iResolution.xy) / vec2(iResolution.y);\n    vec3 viewDir = vec3(0.0, 0.0, 1.0);\n    vec3 camUp = vec3(0.0, 1.0, 0.0);\n    vec3 camPos = vec3(0.0);\n    vec3 u = normalize(cross(camUp, viewDir));\n    vec3 v = cross(viewDir, u);\n    vec3 vcv = camPos + viewDir;\n    vec3 srcCoord = (vcv + (u * p.x)) + (v * p.y);\n    vec3 param = vec3(0.300000011920928955078125 * iTime, sin(0.300000011920928955078125 * iTime), cos(0.22300000488758087158203125 * iTime));\n    vec3 rayDir = FLT_flutter_local_rot(param) * normalize(srcCoord - camPos);\n    vec4 c = vec4(0.0, 0.0, 0.0, 1.0);\n    float depth = 0.0;\n    float d = 0.0;\n    vec3 pos = vec3(0.0);\n    vec3 colorAcc = vec3(0.0);\n    for (int i = 0; i < 109; i++)\n    {\n        pos = (camPos + (rayDir * depth)) + vec3(40.0 * iTime);\n        vec3 param_1 = pos;\n        vec3 _413 = FLT_flutter_local_map(param_1);\n        vec3 mapRes = _413;\n        d = mapRes.x;\n        float lightFalloffFactor = 1.2000000476837158203125 - (0.60000002384185791015625 * mapRes.z);\n        lightFalloffFactor = clamp(lightFalloffFactor, 0.100000001490116119384765625, 1.0);\n        float param_2 = mapRes.y;\n        colorAcc += (FLT_flutter_local_GetSphereIndexColor(param_2) * (exp((-d) * lightFalloffFactor) * 1.0));\n        depth += (d * 0.4000000059604644775390625);\n    }\n    c = vec4(colorAcc * 0.23999999463558197021484375, 1.0);\n    fragColor_1 = c;\n}\n\nvoid FLT_main()\n{\n    iResolution = vec3(uResolution.x, uResolution.y, 0.0);\n    vec2 param_4 = FLT_flutter_local_FlutterFragCoord();\n    vec4 param_3;\n    FLT_flutter_local_mainImage(param_3, param_4);\n    fragColor = param_3;\n}\n\nhalf4 main(float2 iFragCoord)\n{\n      flutter_FragCoord = float4(iFragCoord, 0, 0);\n      FLT_main();\n      return fragColor;\n}\n",
    "stage": 1,
    "uniforms": [
      {
        "array_elements": 0,
        "bit_width": 0,
        "columns": 1,
        "location": 0,
        "name": "iChannel0",
        "rows": 1,
        "type": 12
      },
      {
        "array_elements": 0,
        "bit_width": 32,
        "columns": 1,
        "location": 1,
        "name": "uResolution",
        "rows": 2,
        "type": 10
      },
      {
        "array_elements": 0,
        "bit_width": 32,
        "columns": 1,
        "location": 2,
        "name": "iTime",
        "rows": 1,
        "type": 10
      }
    ]
  }
}